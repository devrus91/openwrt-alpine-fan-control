#!/bin/sh

. /lib/functions.sh

CFGNAME=alpine-fan-control

function get_opt() {
	local opt_name=$1
	local config="@$CFGNAME[0]"
	echo "$( uci_get $CFGNAME "$config" $opt_name )"
}

# set temps (in degrees C) and corresponding fan speeds 
# in ascending order and with the same amount of values

TEMP_MIN=$(  get_opt min_temp  )
SPEED_MIN=$( get_opt min_speed )

TEMP_MED=$(  get_opt med_temp  )
SPEED_MED=$( get_opt med_speed )

TEMP_MAX=$(  get_opt max_temp  )
SPEED_MAX=$( get_opt max_speed )

SLEEP_INTERVAL=$( get_opt interval )
DEBUG=$( get_opt debug )

DRV_SPEED_MIN=0
DRV_SPEED_MAX=255
CFG_SPEED_MAX=100

LOGPREFIX="alpine-fan-controller"
HYSTERESIS=0
TEMP_AT_LAST_SPEED_CHANGE=0

function log_error {
	logger "$LOGPREFIX: ERROR: $1"
}

function log_debug {
	if [ "$DEBUG" = "1" ]; then
		logger "$LOGPREFIX: $1"
	fi
}

if [ -z "$TEMP_MED" ]; then
	log_error "Cannot read option 'med_temp' form config!"
	exit 1
fi

# checking for privileges
if [ $UID -ne 0 ]; then
	log_error "Writing to sysfs requires privileges, relaunch as root!"
	echo "Writing to sysfs requires privileges, relaunch as root"
	exit 1
fi

OPTLIST=""
OPTLIST="$OPTLIST [$TEMP_MIN $SPEED_MIN]"
OPTLIST="$OPTLIST [$TEMP_MED $SPEED_MED]"
OPTLIST="$OPTLIST [$TEMP_MAX $SPEED_MAX]"
OPTLIST="$OPTLIST $SLEEP_INTERVAL $DEBUG"

# Perform conversion to millidegrees Celsius
TEMP_MIN=$(( $TEMP_MIN * 1000 ))
TEMP_MED=$(( $TEMP_MED * 1000 ))
TEMP_MAX=$(( $TEMP_MAX * 1000 ))

# hwmon paths, hardcoded for Xiaomi R3D, adjust as needed
FILE_SPEED=$( grep -l emc230 /sys/class/hwmon/hwmon*/name )
[ -f "$FILE_SPEED" ] || { log_error "fan controller EMC230x not found" ; exit 1; }
FILE_SPEED=$( dirname "$FILE_SPEED" 2>/dev/null )
FILE_SPEED=$FILE_SPEED/pwm1
[ -f "$FILE_SPEED" ] || { log_error "Fan controller EMC230x not found" ; exit 1; }

FILE_TEMP=$( grep -l tmp75 /sys/class/hwmon/hwmon*/name )
[ -f "$FILE_TEMP" ] || { log_error "thermal sensor TMP75 not found" ; exit 1; }
FILE_TEMP=$( dirname "$FILE_TEMP" 2>/dev/null )
FILE_TEMP=$FILE_TEMP/temp1_input
[ -f "$FILE_TEMP" ] || { log_error "Thermal sensor TMP75 not found" ; exit 1; }

function get_speed {
	local speed=$(cat $FILE_SPEED)
	speed=$(( $CFG_SPEED_MAX * $speed / $DRV_SPEED_MAX ))
	echo $speed
}

function internal_set_speed {
	local speed=$1
	local value=$(( $DRV_SPEED_MAX * $speed / $CFG_SPEED_MAX ))
	[ $value -lt $DRV_SPEED_MIN ] && value=$DRV_SPEED_MIN
	[ $value -gt $DRV_SPEED_MAX ] && value=$DRV_SPEED_MAX
	echo $value > $FILE_SPEED
}

function set_speed {
	local NEW_SPEED=$1
	local CUR_SPEED=$( get_speed )
	local TEMP=$(cat $FILE_TEMP)

	log_debug "current speed: $CUR_SPEED, requested to set speed to $NEW_SPEED"
	
	local tmp=$TEMP_AT_LAST_SPEED_CHANGE
	if [ -z "$tmp" ] || [ "$TEMP" -gt "$tmp" ] || [ $(( $TEMP + HYSTERESIS )) -le "$tmp" ]; then
		log_debug "current temp: $TEMP"
		echo "temp at last change was $TEMP_AT_LAST_SPEED_CHANGE"
		echo "changing speed to $NEW_SPEED"
		internal_set_speed $NEW_SPEED
		TEMP_AT_LAST_SPEED_CHANGE=$TEMP
	else
		log_debug "not changing speed, we just did at $TEMP_AT_LAST_SPEED_CHANGE, next change when below $((TEMP_AT_LAST_SPEED_CHANGE - HYSTERESIS))"
	fi
}

function set_speed_adv {
	# interpolate linearly
	local LOWERTEMP=$1
	local LOWERSPEED=$2
	local HIGHERTEMP=$3
	local HIGHERSPEED=$4
	local TEMP=$5
	[ -z "$TEMP" ] && TEMP=$(cat $FILE_TEMP)
	local value=$(( ( $TEMP - $LOWERTEMP ) * ( $HIGHERSPEED - $LOWERSPEED ) ))
	local SPEED=$(( $value / ( $HIGHERTEMP - $LOWERTEMP ) + $LOWERSPEED ))
	log_debug "interpolated speed value for temperature $TEMP is: $SPEED"
	set_speed "$SPEED"
}

function interpolate_speed {
	local i=0
	local TEMP=$(cat $FILE_TEMP)

	log_debug "current temp: $TEMP"

	if [ $TEMP -le $TEMP_MIN ]; then
		# below first point in list, set to min speed
		set_speed $SPEED_MIN
		return
	fi
	if [ $TEMP -gt $TEMP_MAX ]; then
		# above last point in list, set to max speed
		set_speed $SPEED_MAX
		return
	fi
	if [ $TEMP -le $TEMP_MAX ]; then
		set_speed_adv $TEMP_MED $SPEED_MED $TEMP_MAX $SPEED_MAX $TEMP
		return
	fi
	if [ $TEMP -le $TEMP_MED ]; then
		set_speed_adv $TEMP_MIN $SPEED_MIN $TEMP_MED $SPEED_MED $TEMP
		return
	fi
}

function reset_on_exit {
	echo "exiting, going to max fan speed for safety..."
	internal_set_speed 100
	exit 0
}

# always try to reset fans on exit
trap "reset_on_exit" SIGINT SIGTERM

function run_daemon {
	while true; do
		interpolate_speed
		sleep $SLEEP_INTERVAL
	done
}

logger "$LOGPREFIX: run daemon:" $OPTLIST
# finally start the loop
run_daemon
